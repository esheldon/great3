#!/usr/bin/env python
"""
    %prog [options] config_file cuts_config_file
"""
from __future__ import print_function

import sys
import yaml
import numpy
from numpy import where, isfinite, sqrt

import great3
from great3 import files

from optparse import OptionParser
parser=OptionParser(__doc__)

def get_finite_logic(data, model):
    """
    isfinite checks for both nan and inf
    """
    Pname='%s_P' % model
    Qname='%s_Q' % model
    Rname='%s_R' % model

    P=data[Pname]
    Q=data[Qname]
    R=data[Rname]

    logic=(  isfinite(P)
           & isfinite(Q[:,0])
           & isfinite(Q[:,1])
           & isfinite(R[:,0,0])
           & isfinite(R[:,0,1])
           & isfinite(R[:,1,0])
           & isfinite(R[:,1,1]) )

    return logic

def do_calc_mean_shear(conf, cuts, subid):
    """
    Read the data and calculate the mean shear according
    the the run type
    """
    conf['subid']=subid
    data=files.read_output(**conf)

    if 'nfit' in conf['run']:
        model=conf['fit_models'][0]

        model_flagname='%s_flags' % model

        flagval=cuts['flagval']

        logic = data['flags'] == flagval

        w,=where(logic)
        if w.size != data.size:
            print("found %d/%d with flags==0" % (w.size,data.size))

        model_flag_logic = (data[model_flagname]==0)
        w,=where(model_flag_logic)
        if w.size != data.size:
            print("found %d/%d with %s==0" % (w.size,data.size,model_flagname))

        logic = logic & model_flag_logic

        if cuts['check_finite']:
            finite_logic = get_finite_logic(data, model)
            w,=where(finite_logic)
            if w.size != data.size:
                print("found %d/%d finite P,Q,R" % (w.size,data.size))

            logic = logic & finite_logic

        w,=where(logic)
        if w.size != data.size:
            print("kept %d/%d" % (w.size,data.size))

        data=data[w]

        res=great3.nfit.get_shear(data, model)
    elif 'rg' in conf['run']:
        res=great3.rg.select_and_calc_shear(data, **cuts)
    else:
        raise ValueError("unsupported run type: '%s'" % conf['run'])

    return res

def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 2:
        parser.print_help()
        sys.exit(45)

    config_file=args[0]
    cuts_config=args[1]

    if len(args) > 2:
        fobj=open(args[2],'w')
    else:
        fobj=sys.stdout

    conf=yaml.load(open(config_file))
    cuts=yaml.load(open(cuts_config))

    nsub=files.get_nsub(**conf)

    conf['cut'] = cuts['cut']
    outname=files.get_shear_file(**conf)
    print("writing to output file:",outname)

    with open(outname,'w') as fobj:
        for subid in xrange(nsub):
            res=do_calc_mean_shear(conf, cuts, subid)
            out=(subid, res['shear'][0], res['shear'][1])
            fobj.write('%d %.16g %.16g\n' % out)

            out2=(subid, res['shear'][0], sqrt(res['shear_cov'][0,0]),
                  res['shear'][1], sqrt(res['shear_cov'][1,1]) )
            print('%d %g +/- %g  %g +/- %g' % out2)

    print("output in:",outname)

main()
