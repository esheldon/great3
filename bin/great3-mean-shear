#!/usr/bin/env python
"""
    %prog [options] config_file cuts_config_file model
"""
from __future__ import print_function

import sys
import yaml
import numpy
from numpy import where, isfinite, sqrt, zeros, diag, exp

import ngmix

import great3
from great3 import files
from great3.generic import Namer

from optparse import OptionParser
parser=OptionParser(__doc__)

parser.add_option('--with-psf',action='store_true',
                  help="include psf info. File name is different.")

def get_finite_logic(data, model):
    """
    isfinite checks for both nan and inf
    """
    Pname='%s_P' % model
    Qname='%s_Q' % model
    Rname='%s_R' % model

    P=data[Pname]
    Q=data[Qname]
    R=data[Rname]

    logic=(  isfinite(P)
           & isfinite(Q[:,0])
           & isfinite(Q[:,1])
           & isfinite(R[:,0,0])
           & isfinite(R[:,0,1])
           & isfinite(R[:,1,0])
           & isfinite(R[:,1,1]) )

    return logic

def get_shear_expand(conf):
    shear_expand_run = conf.get('shear_expand_run',None)
    if shear_expand_run is None:
        shear_expand=zeros(2)
    else:
        shear_expand = files.read_shear_expand(**conf)

        print("using shear expand run:",shear_expand_run)
    return shear_expand


def do_nfit_select(data, conf, cuts):
    model=conf['fit_models'][0]
    n=Namer(model)

    logic = data['flags'] == 0

    w,=where(logic)
    if w.size != data.size:
        print("found %d/%d with flags==0" % (w.size,data.size))

    model_flag_logic = (data[n('flags')]==0)
    w,=where(model_flag_logic)
    if w.size != data.size:
        print("found %d/%d with %s==0" % (w.size,data.size,n('flags')))

    logic = logic & model_flag_logic

    if cuts['check_finite']:
        finite_logic = get_finite_logic(data, model)
        w,=where(finite_logic)
        if w.size != data.size:
            print("found %d/%d finite P,Q,R" % (w.size,data.size))

        logic = logic & finite_logic

    if 's2n_range' in cuts:
        s2nr = cuts['s2n_range']
        s2n_logic = (  (data[n('s2n_w')] > s2nr[0])
                     & (data[n('s2n_w')] < s2nr[1]) )
        w,=where(s2n_logic)
        if w.size != data.size:
            print("found %d/%d s2n in [%s,%s]" % (w.size,data.size,s2nr[0],s2nr[1]))

        logic = logic & s2n_logic

    if 'Ts2n_min' in cuts:
        Ts2n_min=cuts['Ts2n_min']
        print("doing Ts2n >",Ts2n_min)
        Ts2n = sqrt(1.0/data[n('pars_cov')][:,4,4])
        Ts2n_logic = (Ts2n > Ts2n_min)
        w,=where(Ts2n_logic)
        if w.size != data.size:
            print("found %d/%d Ts2n > %s" % (w.size,data.size,Ts2n_min))

        logic = logic & Ts2n_logic


    if 'arate_range' in cuts:
        arange=cuts['arate_range']
        arate_logic = (  (data[n('arate')] > arange[0])
                       & (data[n('arate')] < arange[1]) )
        w,=where(arate_logic)
        if w.size != data.size:
            print("found %d/%d arate in [%s,%s]" % (w.size,data.size,arange[0],arange[1]))

        logic = logic & arate_logic


    w,=where(logic)
    if w.size != data.size:
        print("kept %d/%d" % (w.size,data.size))
    return w

def do_sfit_select(data, conf, cuts, model):

    n=Namer(model)

    logic = data['flags'] == 0

    w,=where(logic)
    if w.size != data.size:
        print("found %d/%d with flags==0" % (w.size,data.size))

    model_flag_logic = (data[n('flags')]==0)
    w,=where(model_flag_logic)
    if w.size != data.size:
        print("found %d/%d with %s==0" % (w.size,data.size,n('flags')))

    logic = logic & model_flag_logic

    if cuts['check_finite']:
        tmp_logic = (isfinite(data[n('g')][:,0])
                        & isfinite(data[n('g')][:,1])
                        & isfinite(data[n('g_sens')][:,0])
                        & isfinite(data[n('g_sens')][:,1]) )

        w,=where(tmp_logic)
        if w.size != data.size:
            print("found %d/%d finite P,Q,R" % (w.size,data.size))

        logic = logic & tmp_logic

    if 'g_sens_range' in cuts:
        gr=cuts['g_sens_range']
        tmp_logic = (  (data[n('g_sens')][:,0] > gr[0])
                   & (data[n('g_sens')][:,0] < gr[1])
                   & (data[n('g_sens')][:,1] > gr[0])
                   & (data[n('g_sens')][:,1] < gr[1]) )
        w,=where(tmp_logic)
        if w.size != data.size:
            mess="found %d/%d with sens in [%s,%s]"
            print(mess % (w.size,data.size,gr[0],gr[1]))

        logic = logic & tmp_logic


    if 's2n_range' in cuts:
        s2nr = cuts['s2n_range']
        tmp_logic = (  (data[n('s2n_w')] > s2nr[0])
                     & (data[n('s2n_w')] < s2nr[1]) )
        w,=where(tmp_logic)
        if w.size != data.size:
            mess="found %d/%d s2n in [%s,%s]"
            print(mess % (w.size,data.size,s2nr[0],s2nr[1]))

        logic = logic & tmp_logic

    if 'Ts2n_min' in cuts:
        Ts2n_min=cuts['Ts2n_min']
        Ts2n = sqrt(1.0/data[n('pars_cov')][:,4,4])
        Ts2n_logic = (Ts2n > Ts2n_min)
        w,=where(Ts2n_logic)
        if w.size != data.size:
            print("found %d/%d Ts2n > %s" % (w.size,data.size,Ts2n_min))

        logic = logic & Ts2n_logic


    if 'efficiency_min' in cuts:
        effmin=cuts['efficiency_min']
        tmp_logic = ( data[n('efficiency')] > effmin )
        w,=where(tmp_logic)
        if w.size != data.size:
            print("found %d/%d efficiency > %g" % (w.size,data.size,effmin))

        logic = logic & tmp_logic

    if 'Trat_min' in cuts:
        Trat_min=cuts['Trat_min']
        if n('log_T') in data.dtype.names:
            T = exp(data[n('log_T')])
        else:
            T = exp(data[n('T')])
        psf_T = data['psf_T']
        Trat = T/psf_T

        tmp_logic = ( Trat > Trat_min)
        w,=where(tmp_logic)
        if w.size != data.size:
            print("found %d/%d Trat > %g" % (w.size,data.size,Trat_min))

        logic = logic & tmp_logic


    w,=where(logic)
    if w.size != data.size:
        print("kept %d/%d" % (w.size,data.size))
    return w

def get_weights(data, model, conf):
    if not conf['use_weights']:
        return None
    

    n=Namer(model)

    if conf['use_weights']=='noise':
        SN=conf['SN']
        name=n('g_cov')
        weights=1.0/(  2*SN**2
                     + data[name][:,0,0]
                     + 2*data[name][:,0,1] + 
                     + data[name][:,1,1] )
    elif conf['use_weights']=='Ts2n':
        #softening=conf['softening']
        Ts2n = sqrt(1.0/data[n('pars_cov')][:,4,4])
        weights = Ts2n**2
    else:
        raise ValueError("bad weights type: '%s'" % type)

    return weights

def do_calc_mean_shear(conf, cuts, subid, model, with_psf=False):
    """
    Read the data and calculate the mean shear according
    the the run type
    """
    n=Namer(model)

    conf['subid']=subid
    print("-"*70)
    data=files.read_output(**conf)

    res={}

    fclass = conf.get('fitter_class',None)
    if fclass is not None:
        if 'sfit' in fclass:
            from ngmix.lensfit import lensfit_jackknife

            w=do_sfit_select(data, conf, cuts, model)
            wts=get_weights(data[w],model,cuts)
            
            chunksize = w.size//1000
            if chunksize < 1:
                chunksize=1
            print("jackknife size:",chunksize)

            shear, shear_cov = lensfit_jackknife(data[n('g')][w,:],
                                                 data[n('g_sens')][w,:],
                                                 weights=wts,
                                                 chunksize=chunksize)
            res = {'shear':shear,'shear_cov':shear_cov}
        else:
            raise ValueError("bad fitter class: '%s'" % fclass)

    elif 'nfit' in conf['run']:
        shear_expand = get_shear_expand(conf)
        model=conf['fit_models'][0]

        w=do_nfit_select(data, conf, cuts)

        data=data[w]

        res=great3.nfit.get_shear(data, model)

        print("adding shear expand:",shear_expand)
        res['shear'] += shear_expand

        if with_psf:
            res['psf_em1_g'] = data['psf_em1_g'].mean(axis=0)

    elif 'rg' in conf['run']:
        res=great3.rg.select_and_calc_shear(data, **cuts)
    else:
        raise ValueError("unsupported run type: '%s'" % conf['run'])

    return res

def do_write_with_psf(subid, res, fobj):
    err=sqrt(diag(res['shear_cov']))
    out=(subid,
         res['shear'][0],
         res['shear'][1],
         err[0],
         err[1],
         res['psf_em1_g'][0],
         res['psf_em1_g'][1])

    fobj.write('%d %.16g %.16g %.16g %.16g %.16g %.16g\n' % out)

def do_write_no_psf(subid, res, fobj):
    out=(subid,
         res['shear'][0],
         sqrt(res['shear_cov'][0,0]),
         res['shear'][1],
         sqrt(res['shear_cov'][1,1]) )
    fobj.write('%d %.16g %.16g %.16g %.16g\n' % out)


def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    config_file=args[0]
    cuts_config=args[1]
    model=args[2]

    if len(args) > 2:
        fobj=open(args[2],'w')
    else:
        fobj=sys.stdout

    conf=yaml.load(open(config_file))
    cuts=yaml.load(open(cuts_config))

    nsub=files.get_nsub(**conf)

    conf['cut'] = cuts['cut']

    with_psf=options.with_psf

    outname=files.get_shear_file(with_psf=with_psf, model=model, **conf)
    print("writing to output file:",outname)

    with open(outname,'w') as fobj:
        for subid in xrange(nsub):
            res=do_calc_mean_shear(conf, cuts, subid, model, 
                                   with_psf=with_psf)

            if with_psf:
                do_write_with_psf(subid,res, fobj)
            else:
                do_write_no_psf(subid, res, fobj)

            out2=(subid, res['shear'][0], sqrt(res['shear_cov'][0,0]),
                  res['shear'][1], sqrt(res['shear_cov'][1,1]) )

            print('%d %g +/- %g  %g +/- %g' % out2)

    print("output in:",outname)

main()
