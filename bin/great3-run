#!/usr/bin/env python
"""
    %prog [options] config_file subid
"""
from __future__ import print_function

import sys
import os
import yaml
import fitsio
from numpy import zeros, where

import great3
from great3 import files

from optparse import OptionParser
parser=OptionParser(__doc__)

parser.add_option('--obj-range',default=None,
                  help="obj range as csv")
parser.add_option('--make-plots',action='store_true',
                  help="make some plots")

def get_checkpoint_data(output_file):
    """
    Read in checkpoint data if it exists
    """
    checkpoint_file=output_file.replace('.fits','-checkpoint.fits')
    data=None

    if os.path.exists(checkpoint_file):
        print('reading checkpoint data:',checkpoint_file)
        data=fitsio.read(checkpoint_file)

    return checkpoint_file, data

def cleanup_checkpoint(checkpoint_file):
    """
    if we get this far, we have succeeded in writing the data. We can remove
    the checkpoint file
    """
    if os.path.exists(checkpoint_file):
        print('removing checkpoint file',checkpoint_file)
        os.remove(checkpoint_file)


def get_obj_range(options):
    obj_range=options.obj_range
    if obj_range is not None:
        obj_range=[int(v) for v in obj_range.split(',')]

    return obj_range

def run(conf):


    if 'fitter_class' in conf:

        if conf['fitter_class']=='sfit':
            if conf['fitter_type'] == 'maxlike':
                fitter=great3.sfit.LMFitter(**conf)
            elif conf['fitter_type']=='isample':
                fitter=great3.sfit.ISampleFitter(**conf)
            else:
                raise ValueError("bad fitter type: '%s'" % conf['fitter_type'])

        elif conf['fitter_class']=='sfit-composite':
            if conf['fitter_type'] == 'maxlike':
                fitter=great3.sfit.CompositeLMFitter(**conf)
            elif conf['fitter_type']=='isample':
                fitter=great3.sfit.CompositeISampleFitter(**conf)
            else:
                raise ValueError("bad fitter type: '%s'" % conf['fitter_type'])


        else:
            raise ValueError("bad fitter class: '%s'" % conf['fitter_class'])

    elif 'nfit' in conf['run']:
        fitter=great3.nfit.NGMixFitter(**conf)
    elif 'rg' in conf['run']:
        fitter=great3.rg.RGFitter(**conf)
    else:
        raise ValueError("bad run: '%s'" % conf['run'])

    fitter.go()

    data=fitter.get_data()
    return data

def get_shear_expand(conf):
    shear_expand_run = conf.get('shear_expand_run',None)
    if shear_expand_run is None:
        shear_expand=zeros(2)
    else:
        shear_expand = files.read_shear_expand(**conf)

    print("using shear expand run:",shear_expand_run)
    print("using shear expand:",shear_expand)
    return shear_expand

def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 2:
        parser.print_help()
        sys.exit(45)

    config_file = args[0]
    subid=int(args[1])

    conf=yaml.load(open(config_file))

    conf['subid'] = subid
    conf['obj_range']=get_obj_range(options)
    outfile=files.get_output_file(**conf)
    print("will write to file:",outfile)

    conf['output_file']=outfile
    conf['checkpoint_file'], conf['checkpoint_data'] = \
            get_checkpoint_data(conf['output_file'])

    conf['make_plots'] = options.make_plots

    conf['shear_expand'] = get_shear_expand(conf)

    data=run(conf)

    files.write_fits_clobber(outfile, data)

    cleanup_checkpoint(conf['checkpoint_file'])


main()
